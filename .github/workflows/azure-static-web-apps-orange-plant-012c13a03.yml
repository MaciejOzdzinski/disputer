name: Azure Static Web Apps CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

jobs:
  build_and_deploy_job:
    if: |
      github.event_name == 'push' ||
      (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Deploy Job

    steps:
      # 1) Checkout całego repozytorium (w tym folderów dist/, src/, staticwebapp.config.json itp.)
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: true
          lfs: false

      # 2) Ustawiamy Node.js w wersji 20.11.1 (dokładnie takiej, jak używasz lokalnie)
      - name: Use Node.js 20.11.1
        uses: actions/setup-node@v3
        with:
          node-version: '20.11.1'

      # 3) Instalujemy wszystkie zależności (dependencies + devDependencies)
      - name: Install dependencies
        run: npm ci

      # 4) Wywołujemy build Webpacka (npx webpack). To utworzy folder dist/ z plikami:
      #    taskpane.html, commands.html, wszystkie .js/.map itp.
      - name: Build with Webpack
        run: npm run build
        # Upewnij się, że w Twoim package.json masz:
        #   "scripts": {
        #     "build": "npx webpack --mode production",
        #     ...
        #   }
        # Dzięki temu nie trafisz na błąd "Permission denied" przy webpack.

      # 5) Kopiujemy plik staticwebapp.config.json (który trzymasz w root repo)
      #    do katalogu dist/, tak aby Azure SWA wiedziało, że ma przekierowywać "/" na "taskpane.html".
      - name: Copy SWA config into dist
        run: |
          cp staticwebapp.config.json dist/staticwebapp.config.json

      # 6) (opcjonalnie) wylistuj zawartość dist/, żeby w logach mieć potwierdzenie,
      #    że w dist/ są: taskpane.html, commands.html, staticwebapp.config.json itd.
      - name: List dist content (for debug)
        run: |
          echo "=== Zawartość folderu dist ==="
          ls -R dist

      # 7) Upload gotowych plików z dist/ do Azure Static Web Apps w trybie "upload",
      #    wyłączając jednocześnie wewnętrzny build Oryx'a (skip_app_build: true).
      - name: Upload build output to Azure Static Web Apps
        id: swa
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_ORANGE_PLANT_012C13A03 }}
          repo_token:               ${{ secrets.GITHUB_TOKEN }}
          action: "upload"                # upload = bierzemy istniejące pliki, nie budujemy ponownie w Oryx
          app_location: "."               # root repo (tam, gdzie package.json i staticwebapp.config.json)
          api_location: ""                # nie mamy folderu "api" – dajemy pusty string
          output_location: "dist"   # katalog, w którym Webpack utworzył gotowe pliki
          skip_app_build: true            # istotne! wyłącza wewnętrzny build przez Oryx

  close_pull_request_job:
    if: github.event_name == 'pull_request' && github.event.action == 'closed'
    runs-on: ubuntu-latest
    name: Close Pull Request Job
    steps:
      - name: Close Pull Request
        id: closepullrequest
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN_ORANGE_PLANT_012C13A03 }}
          action: "close"
